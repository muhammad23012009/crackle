#!/bin/bash
PKG_PATH=${PKG_PATH:-/home/pkgs};
PKGS_DIR=${PKGS_DIR:-/var/log};
APTCACHE=${APTCACHE:-/apt/cache};
CRACKDIR=$HOME/packages/$2;
SCRP_DIR=$(dirname "${BASH_SOURCE[0]}")
APT="apt-get -y -a armhf -o Dir::Cache=$PKG_PATH$APTCACHE -o Dir::State=$PKG_PATH$APTCACHE"
[ "$1" = "clean" ] && {
    $APT "$1";
    find -L "$PKG_PATH"/bin -wholename "$PKG_PATH"/bin -o -type d -prune -o -type l -exec rm {} +;
    find -L "$PKG_PATH"/lib -wholename "$PKG_PATH"/lib -o -type d -prune -o -type l -exec rm {} +;
    exit 0;
}

[ "$1" = "setup" ] && {
    bashrc=$(grep crackle "$HOME"/.bashrc);
    profile=$(grep crackle "$HOME"/.profile);
    source $SCRP_DIR/triplet;
    TRIPLET=$(get_architecture);
    [[ -d "$PKG_PATH" && -n "$bashrc" && -n "$profile" && -d "$PKG_PATH$PKGS_DIR" && -f "$HOME"/.cracklerc ]] && { echo "crackle is already set up"; exit 0; }
    [[ -d "$PKG_PATH" ]] || mkdir "$PKG_PATH";
    [[ -d "$PKG_PATH$PKGS_DIR" ]] || mkdir -p "$PKG_PATH$PKGS_DIR";
    [[ -d "$PKG_PATH$APTCACHE" ]] || mkdir -p "$PKG_PATH$APTCACHE";
    echo "TRIPLET=$TRIPLET" > "$HOME"/.cracklerc;
    echo "PKG_PATH=$PKG_PATH" >> "$HOME"/.cracklerc;
    cat "$SCRP_DIR"/cracklerc >> "$HOME"/.cracklerc;
    [[ -z "$bashrc" ]] && cat "$SCRP_DIR"/crackle.conf >> "$HOME"/.bashrc;
    [[ -z "$profile" ]] && cat "$SCRP_DIR"/crackle.conf >> "$HOME"/.profile;
    # this just reloads bash the user doesn't have to
    # shellcheck source=/dev/null
    source "$HOME"/.bashrc
    exit 0;
}

[ "$1" = "update" ] && {
	$APT "$1";
        exit 0;
}

[ "$1" = "download" ] && {
	$APT "$1" "$2";
        exit 0;
}

[[ "$1" = "search" || "$1" = "show" ]] && {
	apt-cache "$1" "$2";
        exit 0;
}

[[ "$1" = "install" || "$1" = "crack" ]] && {
    op="install";
    if [[ "$1" = "crack" ]]; then
	    dir="$CRACKDIR";
    else
	    dir="$PKG_PATH";
    fi
    [[ "$1" = "crack" && ! -d "$dir" ]] && mkdir "$dir";
    [ "$1" = "install" ] && {
            [ -d "$PKG_PATH" ] || { echo "$PKG_PATH does not exist, please run crackle setup first"; exit 1; }
    }
    [ -d "$dir$PKGS_DIR/$2" ] && { echo "$2" is already installed; exit 0; }
    $APT "$op" --download-only "$2" || exit 1;
    readarray -t packages < <(ls $PKG_PATH/apt/cache/archives/*.deb);
    for package in "${packages[@]}"
        do
            pkg="$(basename "$package")";
            pkgname="${pkg%%_*}";
            pkgversion="${pkg%_*}";
            pkgversion="${pkgversion#*_}";
	    [ -d "$dir$PKGS_DIR/$pkgname" ] || mkdir "$dir$PKGS_DIR/$pkgname";
            dpkg -c "$package" | awk '{print $6}' > "$dir$PKGS_DIR/$pkgname/pkgs.list";
            echo "$pkgversion" > "$dir$PKGS_DIR/$pkgname/pkgs.version";
            dpkg-deb -xv "$package" "$dir";
        done;
    $APT clean;
}
